// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TesteVericode.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Menu e formularios")]
    public partial class MenuEFormulariosFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("pt"), "Features", "Menu e formularios", "\tComo um usuário\r\n\tQuero navegar pelo menu\r\n\tPara preencher os formulários", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "Tricentis.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 7
#line hidden
#line 8
 await testRunner.GivenAsync("que eu acesse a pagina Tricentis", ((string)(null)), ((global::Reqnroll.Table)(null)), "Dado ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Valida preenchimento dos campos e preenche formularios")]
        [NUnit.Framework.CategoryAttribute("test")]
        public async System.Threading.Tasks.Task ValidaPreenchimentoDosCamposEPreencheFormularios()
        {
            string[] tagsOfScenario = new string[] {
                    "test"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Valida preenchimento dos campos e preenche formularios", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "Campo",
                            "Valor",
                            "Aviso"});
                table1.AddRow(new string[] {
                            "Engine Performance",
                            "xxx",
                            "Must be a number between 1 and 2000"});
                table1.AddRow(new string[] {
                            "List Price",
                            "200",
                            "Must be a number between 500 and 100000"});
                table1.AddRow(new string[] {
                            "Date of Manufacture",
                            "2222222",
                            "Must be a valid date"});
                table1.AddRow(new string[] {
                            "Annual Mileage",
                            "ssddd",
                            "Must be a number between 100 and 100000"});
#line 12
 await testRunner.WhenAsync("o [Campo] for preenchido com [Valor] invalido e exibido o [Aviso]", ((string)(null)), table1, "Quando ");
#line hidden
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "Campo",
                            "Valor"});
                table2.AddRow(new string[] {
                            "Make",
                            "Honda"});
                table2.AddRow(new string[] {
                            "Model",
                            "Scooter"});
                table2.AddRow(new string[] {
                            "Cylinder Capacity",
                            "100"});
                table2.AddRow(new string[] {
                            "Engine Performance",
                            "100"});
                table2.AddRow(new string[] {
                            "Date of Manufacture",
                            "03/24/2025"});
                table2.AddRow(new string[] {
                            "Number of Seats",
                            "1"});
                table2.AddRow(new string[] {
                            "Right Hand Drive",
                            "Yes"});
                table2.AddRow(new string[] {
                            "Number of Seats Motorcycle",
                            "1"});
                table2.AddRow(new string[] {
                            "Fuel Type",
                            "Gas"});
                table2.AddRow(new string[] {
                            "Payload",
                            "100"});
                table2.AddRow(new string[] {
                            "Total Weight",
                            "400"});
                table2.AddRow(new string[] {
                            "List Price",
                            "20000"});
                table2.AddRow(new string[] {
                            "License Plate Number",
                            "123456"});
                table2.AddRow(new string[] {
                            "Annual Mileage",
                            "10000"});
#line 18
 await testRunner.AndAsync("preencho os campos do formulario Enter Vehicle Data com valores validos", ((string)(null)), table2, "E ");
#line hidden
#line 34
 await testRunner.AndAsync("clico no botao Next do formulario \"Enter Vehicle Data\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "E ");
#line hidden
#line 35
 await testRunner.AndAsync("deve ser apresentado o formulario \"Enter Insurant Data\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "E ");
#line hidden
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "Campo",
                            "Valor"});
                table3.AddRow(new string[] {
                            "First Name",
                            "Joao"});
                table3.AddRow(new string[] {
                            "Last Name",
                            "Silva"});
                table3.AddRow(new string[] {
                            "Date of Birth",
                            "24/10/1988"});
                table3.AddRow(new string[] {
                            "Gender",
                            "Male"});
                table3.AddRow(new string[] {
                            "Street Address",
                            "Rua 1"});
                table3.AddRow(new string[] {
                            "Country",
                            "Brazil"});
                table3.AddRow(new string[] {
                            "Zip Code",
                            "123456"});
                table3.AddRow(new string[] {
                            "City",
                            "Sao Paulo"});
                table3.AddRow(new string[] {
                            "Occupation",
                            "Employee"});
                table3.AddRow(new string[] {
                            "Hobbies",
                            "Speeding"});
                table3.AddRow(new string[] {
                            "Website",
                            "www.teste.com"});
                table3.AddRow(new string[] {
                            "Picture",
                            "test.jpg"});
#line 36
 await testRunner.AndAsync("preencho os campos do formulario Enter Insurant Data com valores validos", ((string)(null)), table3, "E ");
#line hidden
#line 50
 await testRunner.AndAsync("clico no botao Next do formulario \"Enter Insurant Data\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "E ");
#line hidden
#line 51
 await testRunner.AndAsync("deve ser apresentado o formulario \"Enter Product Data\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "E ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
